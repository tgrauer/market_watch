/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./resources/js/analystratings.js":
/*!****************************************!*\
  !*** ./resources/js/analystratings.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("Chart.pluginService.register({\n  beforeDraw: function beforeDraw(chart) {\n    if (chart.config.options.elements.center) {\n      //Get ctx from string\n      var ctx = chart.chart.ctx; //Get options from the center object in options\n\n      var centerConfig = chart.config.options.elements.center;\n      var fontStyle = centerConfig.fontStyle || 'Arial';\n      var txt = centerConfig.text;\n      var color = '#333';\n      var sidePadding = centerConfig.sidePadding || 20;\n      var sidePaddingCalculated = sidePadding / 100 * (chart.innerRadius * 2); //Start with a base font of 30px\n\n      ctx.font = \"40px \" + fontStyle; //Get the width of the string and also the width of the element minus 10 to give it 5px side padding\n\n      var stringWidth = ctx.measureText(txt).width;\n      var elementWidth = chart.innerRadius * 2 - sidePaddingCalculated; // Find out how much the font can grow in width.\n\n      var widthRatio = elementWidth / stringWidth;\n      var newFontSize = Math.floor(20 * widthRatio);\n      var elementHeight = chart.innerRadius * 2; // Pick a new font size so it will not be larger than the height of label.\n\n      var fontSizeToUse = Math.min(newFontSize, elementHeight); //Set font settings to draw it correctly.\n\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'top';\n      var centerX = (chart.chartArea.left + chart.chartArea.right) / 2;\n      var centerY = (chart.chartArea.top + chart.chartArea.bottom) / 1.7;\n      ctx.font = fontSizeToUse + \"px \" + fontStyle;\n      ctx.fillStyle = color; //Draw text in center\n\n      ctx.fillText(txt, centerX, centerY);\n    }\n  }\n});\nvar ticker = $('.ticker').text();\nvar rating_types = ['ratingBuy', 'ratingOverweight', 'ratingHold', 'ratingUnderweight', 'ratingSell']; // GET ANALYST DATA\n\nfunction get_analyst_ratings(ticker) {\n  $.ajaxSetup({\n    headers: {\n      'X-CSRF-TOKEN': $('meta[name=\"_token\"]').attr('content')\n    }\n  });\n  var token = $('meta[name=\"csrf-token\"]').attr('content');\n  $.ajax({\n    url: '/company/' + ticker + '/get_analyst_ratings/',\n    type: 'GET',\n    dataType: 'json',\n    data: {\n      _token: token,\n      ticker: ticker\n    },\n    success: function success(response) {\n      build_charts(response);\n    }\n  });\n}\n\nget_analyst_ratings(ticker); // BUILD ALL CHARTS\n\nfunction build_charts(response) {\n  // BUY CONSENSUS CHART\n  var ctx = document.getElementById(\"buy_consensus\");\n  var buy_consensus = new Chart(ctx, {\n    type: 'doughnut',\n    data: {\n      labels: [],\n      datasets: [{\n        data: [response.buy_consensus, 100 - response.buy_consensus],\n        backgroundColor: ['#42A458', '#ccc'],\n        borderColor: ['#ccc'],\n        borderWidth: 1\n      }]\n    },\n    options: {\n      rotation: 1 * Math.PI,\n      circumference: 1 * Math.PI,\n      responsive: true,\n      legend: {\n        display: false,\n        fontColor: '#000'\n      },\n      tooltips: {\n        enabled: false\n      },\n      elements: {\n        center: {\n          text: response.buy_consensus + '%',\n          color: '#000',\n          fontStyle: 'Arial',\n          sidePadding: 15\n        }\n      }\n    }\n  }); // CURRENT ANALYST RATINGS\n\n  var current_analyst_ratings_data = {\n    labels: ['Strong Buy', 'Buy', 'Hold', 'Sell', 'Strong Sell'],\n    datasets: [{\n      data: response.current_ratings,\n      backgroundColor: ['#3B954F', '#38c172', '#aaa', '#EB4B46', '#C72D29']\n    }],\n    elements: {\n      center: {\n        color: '#203047',\n        fontStyle: 'Segoeui',\n        sidePadding: 15\n      }\n    }\n  };\n  var current_analyst_ratings_options = {\n    scales: {\n      xAxes: [{\n        ticks: {// fontColor: Master.tick_color,\n        },\n        gridLines: {// color: Master.gridline_color,\n        }\n      }],\n      yAxes: [{\n        ticks: {// fontColor: Master.tick_color,\n        },\n        gridLines: {// color: Master.gridline_color,\n        }\n      }]\n    },\n    responsive: true,\n    maintainAspectRatio: false,\n    legend: {\n      display: false\n    },\n    tooltips: {\n      enabled: true,\n      mode: 'single' // callbacks: {\n      //     label: function (tooltipItem, data) {\n      // return Master.convertSecsToHrsMinsSecs(data['datasets'][0]['data'][tooltipItem['index']]);\n      //     }\n      // }\n\n    }\n  };\n  var ctx = document.getElementById('current_analyst_ratings_chart').getContext('2d'); // if (window.current_analyst_ratings_chart != undefined) {\n  //     window.current_analyst_ratings_chart.destroy();\n  // }\n\n  console.log(response.historic_ratings.strong_buy);\n  window.current_analyst_ratings_chart = new Chart(ctx, {\n    type: 'horizontalBar',\n    data: current_analyst_ratings_data,\n    options: current_analyst_ratings_options\n  }); // HISTORIC ANALYSTS RATINGS\n\n  var historic_analyst_ratings_data = {\n    labels: response.historic_dates,\n    // /['#3B954F', '#38c172', '#aaa', '#EB4B46', '#C72D29']\n    datasets: [{\n      label: 'Strong Buy',\n      backgroundColor: '#3B954F',\n      data: response.historic_ratings.strong_buy\n    }, {\n      label: 'Buy',\n      backgroundColor: '#38c172',\n      data: response.historic_ratings.buy\n    }, {\n      label: 'Hold',\n      backgroundColor: '#aaa',\n      data: response.historic_ratings.hold\n    }, {\n      label: 'Sell',\n      backgroundColor: '#EB4B46',\n      data: response.historic_ratings.sell\n    }, {\n      label: 'Strong Sell',\n      backgroundColor: '#C72D29',\n      data: response.historic_ratings.strong_sell\n    }]\n  };\n  var historic_analyst_ratings_options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    legend: {\n      // display:false,\n      position: 'bottom',\n      labels: {\n        boxWidth: 12 // fontColor: Master.tick_color,\n\n      }\n    },\n    scales: {\n      xAxes: [{\n        stacked: true,\n        ticks: {\n          // fontColor: Master.tick_color,\n          beginAtZero: true // userCallback: function (label, index, labels) {\n          //     if (Math.floor(label) === label) {\n          //         return label;\n          //     }\n          // },\n\n        },\n        scaleLabel: {\n          display: true,\n          labelString: 'Ratings by Date' // fontColor: Master.tick_color\n\n        },\n        gridLines: {// color: Master.gridline_color,\n        }\n      }],\n      yAxes: [{\n        ticks: {// fontColor: Master.tick_color,\n        },\n        gridLines: {// color: Master.gridline_color,\n        },\n        stacked: true,\n        position: 'left',\n        scalePositionLeft: true,\n        scaleLabel: {\n          display: true,\n          labelString: '# of Ratings' // fontColor: Master.tick_color\n\n        }\n      }]\n    },\n    tooltips: {\n      enabled: true,\n      mode: 'label' // filter: function (tooltipItem, data) {\n      //     var datapointValue = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];\n      //     if (datapointValue) {\n      //         return true;\n      //     }\n      // }\n\n    }\n  };\n\n  if (window.historic_analyst_ratings_chart != undefined) {// window.historic_analyst_ratings_chart.destroy();\n  }\n\n  var ctx = document.getElementById('historic_analyst_ratings_chart').getContext('2d');\n  window.historic_analyst_ratings_chart = new Chart(ctx, {\n    type: 'bar',\n    data: historic_analyst_ratings_data,\n    options: historic_analyst_ratings_options\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvYW5hbHlzdHJhdGluZ3MuanM/NWU2YyJdLCJuYW1lcyI6WyJDaGFydCIsInBsdWdpblNlcnZpY2UiLCJyZWdpc3RlciIsImJlZm9yZURyYXciLCJjaGFydCIsImNvbmZpZyIsIm9wdGlvbnMiLCJlbGVtZW50cyIsImNlbnRlciIsImN0eCIsImNlbnRlckNvbmZpZyIsImZvbnRTdHlsZSIsInR4dCIsInRleHQiLCJjb2xvciIsInNpZGVQYWRkaW5nIiwic2lkZVBhZGRpbmdDYWxjdWxhdGVkIiwiaW5uZXJSYWRpdXMiLCJmb250Iiwic3RyaW5nV2lkdGgiLCJtZWFzdXJlVGV4dCIsIndpZHRoIiwiZWxlbWVudFdpZHRoIiwid2lkdGhSYXRpbyIsIm5ld0ZvbnRTaXplIiwiTWF0aCIsImZsb29yIiwiZWxlbWVudEhlaWdodCIsImZvbnRTaXplVG9Vc2UiLCJtaW4iLCJ0ZXh0QWxpZ24iLCJ0ZXh0QmFzZWxpbmUiLCJjZW50ZXJYIiwiY2hhcnRBcmVhIiwibGVmdCIsInJpZ2h0IiwiY2VudGVyWSIsInRvcCIsImJvdHRvbSIsImZpbGxTdHlsZSIsImZpbGxUZXh0IiwidGlja2VyIiwiJCIsInJhdGluZ190eXBlcyIsImdldF9hbmFseXN0X3JhdGluZ3MiLCJhamF4U2V0dXAiLCJoZWFkZXJzIiwiYXR0ciIsInRva2VuIiwiYWpheCIsInVybCIsInR5cGUiLCJkYXRhVHlwZSIsImRhdGEiLCJfdG9rZW4iLCJzdWNjZXNzIiwicmVzcG9uc2UiLCJidWlsZF9jaGFydHMiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiYnV5X2NvbnNlbnN1cyIsImxhYmVscyIsImRhdGFzZXRzIiwiYmFja2dyb3VuZENvbG9yIiwiYm9yZGVyQ29sb3IiLCJib3JkZXJXaWR0aCIsInJvdGF0aW9uIiwiUEkiLCJjaXJjdW1mZXJlbmNlIiwicmVzcG9uc2l2ZSIsImxlZ2VuZCIsImRpc3BsYXkiLCJmb250Q29sb3IiLCJ0b29sdGlwcyIsImVuYWJsZWQiLCJjdXJyZW50X2FuYWx5c3RfcmF0aW5nc19kYXRhIiwiY3VycmVudF9yYXRpbmdzIiwiY3VycmVudF9hbmFseXN0X3JhdGluZ3Nfb3B0aW9ucyIsInNjYWxlcyIsInhBeGVzIiwidGlja3MiLCJncmlkTGluZXMiLCJ5QXhlcyIsIm1haW50YWluQXNwZWN0UmF0aW8iLCJtb2RlIiwiZ2V0Q29udGV4dCIsImNvbnNvbGUiLCJsb2ciLCJoaXN0b3JpY19yYXRpbmdzIiwic3Ryb25nX2J1eSIsIndpbmRvdyIsImN1cnJlbnRfYW5hbHlzdF9yYXRpbmdzX2NoYXJ0IiwiaGlzdG9yaWNfYW5hbHlzdF9yYXRpbmdzX2RhdGEiLCJoaXN0b3JpY19kYXRlcyIsImxhYmVsIiwiYnV5IiwiaG9sZCIsInNlbGwiLCJzdHJvbmdfc2VsbCIsImhpc3RvcmljX2FuYWx5c3RfcmF0aW5nc19vcHRpb25zIiwicG9zaXRpb24iLCJib3hXaWR0aCIsInN0YWNrZWQiLCJiZWdpbkF0WmVybyIsInNjYWxlTGFiZWwiLCJsYWJlbFN0cmluZyIsInNjYWxlUG9zaXRpb25MZWZ0IiwiaGlzdG9yaWNfYW5hbHlzdF9yYXRpbmdzX2NoYXJ0IiwidW5kZWZpbmVkIl0sIm1hcHBpbmdzIjoiQUFBQUEsS0FBSyxDQUFDQyxhQUFOLENBQW9CQyxRQUFwQixDQUE2QjtBQUN6QkMsWUFBVSxFQUFFLG9CQUFVQyxLQUFWLEVBQWlCO0FBQ3pCLFFBQUlBLEtBQUssQ0FBQ0MsTUFBTixDQUFhQyxPQUFiLENBQXFCQyxRQUFyQixDQUE4QkMsTUFBbEMsRUFBMEM7QUFDdEM7QUFDQSxVQUFJQyxHQUFHLEdBQUdMLEtBQUssQ0FBQ0EsS0FBTixDQUFZSyxHQUF0QixDQUZzQyxDQUl0Qzs7QUFDQSxVQUFJQyxZQUFZLEdBQUdOLEtBQUssQ0FBQ0MsTUFBTixDQUFhQyxPQUFiLENBQXFCQyxRQUFyQixDQUE4QkMsTUFBakQ7QUFDQSxVQUFJRyxTQUFTLEdBQUdELFlBQVksQ0FBQ0MsU0FBYixJQUEwQixPQUExQztBQUNBLFVBQUlD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SSxFQUFFLEtBRDZDO0FBRW5ERSxRQUFJLEVBQUV1Qyw2QkFGNkM7QUFHbkR0RixXQUFPLEVBQUU2RjtBQUgwQyxHQUFmLENBQXhDO0FBS0giLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvYW5hbHlzdHJhdGluZ3MuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJDaGFydC5wbHVnaW5TZXJ2aWNlLnJlZ2lzdGVyKHtcbiAgICBiZWZvcmVEcmF3OiBmdW5jdGlvbiAoY2hhcnQpIHtcbiAgICAgICAgaWYgKGNoYXJ0LmNvbmZpZy5vcHRpb25zLmVsZW1lbnRzLmNlbnRlcikge1xuICAgICAgICAgICAgLy9HZXQgY3R4IGZyb20gc3RyaW5nXG4gICAgICAgICAgICB2YXIgY3R4ID0gY2hhcnQuY2hhcnQuY3R4O1xuXG4gICAgICAgICAgICAvL0dldCBvcHRpb25zIGZyb20gdGhlIGNlbnRlciBvYmplY3QgaW4gb3B0aW9uc1xuICAgICAgICAgICAgdmFyIGNlbnRlckNvbmZpZyA9IGNoYXJ0LmNvbmZpZy5vcHRpb25zLmVsZW1lbnRzLmNlbnRlcjtcbiAgICAgICAgICAgIHZhciBmb250U3R5bGUgPSBjZW50ZXJDb25maWcuZm9udFN0eWxlIHx8ICdBcmlhbCc7XG4gICAgICAgICAgICB2YXIgdHh0ID0gY2VudGVyQ29uZmlnLnRleHQ7XG4gICAgICAgICAgICB2YXIgY29sb3IgPSAnIzMzMyc7XG4gICAgICAgICAgICB2YXIgc2lkZVBhZGRpbmcgPSBjZW50ZXJDb25maWcuc2lkZVBhZGRpbmcgfHwgMjA7XG4gICAgICAgICAgICB2YXIgc2lkZVBhZGRpbmdDYWxjdWxhdGVkID0gKHNpZGVQYWRkaW5nIC8gMTAwKSAqIChjaGFydC5pbm5lclJhZGl1cyAqIDIpXG4gICAgICAgICAgICAvL1N0YXJ0IHdpdGggYSBiYXNlIGZvbnQgb2YgMzBweFxuICAgICAgICAgICAgY3R4LmZvbnQgPSBcIjQwcHggXCIgKyBmb250U3R5bGU7XG5cbiAgICAgICAgICAgIC8vR2V0IHRoZSB3aWR0aCBvZiB0aGUgc3RyaW5nIGFuZCBhbHNvIHRoZSB3aWR0aCBvZiB0aGUgZWxlbWVudCBtaW51cyAxMCB0byBnaXZlIGl0IDVweCBzaWRlIHBhZGRpbmdcbiAgICAgICAgICAgIHZhciBzdHJpbmdXaWR0aCA9IGN0eC5tZWFzdXJlVGV4dCh0eHQpLndpZHRoO1xuICAgICAgICAgICAgdmFyIGVsZW1lbnRXaWR0aCA9IChjaGFydC5pbm5lclJhZGl1cyAqIDIpIC0gc2lkZVBhZGRpbmdDYWxjdWxhdGVkO1xuXG4gICAgICAgICAgICAvLyBGaW5kIG91dCBob3cgbXVjaCB0aGUgZm9udCBjYW4gZ3JvdyBpbiB3aWR0aC5cbiAgICAgICAgICAgIHZhciB3aWR0aFJhdGlvID0gZWxlbWVudFdpZHRoIC8gc3RyaW5nV2lkdGg7XG4gICAgICAgICAgICB2YXIgbmV3Rm9udFNpemUgPSBNYXRoLmZsb29yKDIwICogd2lkdGhSYXRpbyk7XG4gICAgICAgICAgICB2YXIgZWxlbWVudEhlaWdodCA9IChjaGFydC5pbm5lclJhZGl1cyAqIDIpO1xuXG4gICAgICAgICAgICAvLyBQaWNrIGEgbmV3IGZvbnQgc2l6ZSBzbyBpdCB3aWxsIG5vdCBiZSBsYXJnZXIgdGhhbiB0aGUgaGVpZ2h0IG9mIGxhYmVsLlxuICAgICAgICAgICAgdmFyIGZvbnRTaXplVG9Vc2UgPSBNYXRoLm1pbihuZXdGb250U2l6ZSwgZWxlbWVudEhlaWdodCk7XG5cbiAgICAgICAgICAgIC8vU2V0IGZvbnQgc2V0dGluZ3MgdG8gZHJhdyBpdCBjb3JyZWN0bHkuXG4gICAgICAgICAgICBjdHgudGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgICAgICAgICBjdHgudGV4dEJhc2VsaW5lID0gJ3RvcCc7XG4gICAgICAgICAgICB2YXIgY2VudGVyWCA9ICgoY2hhcnQuY2hhcnRBcmVhLmxlZnQgKyBjaGFydC5jaGFydEFyZWEucmlnaHQpIC8gMik7XG4gICAgICAgICAgICB2YXIgY2VudGVyWSA9ICgoY2hhcnQuY2hhcnRBcmVhLnRvcCArIGNoYXJ0LmNoYXJ0QXJlYS5ib3R0b20pIC8gMS43KTtcbiAgICAgICAgICAgIGN0eC5mb250ID0gZm9udFNpemVUb1VzZSArIFwicHggXCIgKyBmb250U3R5bGU7XG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gY29sb3I7XG5cbiAgICAgICAgICAgIC8vRHJhdyB0ZXh0IGluIGNlbnRlclxuICAgICAgICAgICAgY3R4LmZpbGxUZXh0KHR4dCwgY2VudGVyWCwgY2VudGVyWSk7XG4gICAgICAgIH1cbiAgICB9XG59KTtcblxudmFyIHRpY2tlciA9ICQoJy50aWNrZXInKS50ZXh0KCk7XG52YXIgcmF0aW5nX3R5cGVzID0gWydyYXRpbmdCdXknLCAncmF0aW5nT3ZlcndlaWdodCcsICdyYXRpbmdIb2xkJywgJ3JhdGluZ1VuZGVyd2VpZ2h0JywgJ3JhdGluZ1NlbGwnXTtcblxuLy8gR0VUIEFOQUxZU1QgREFUQVxuZnVuY3Rpb24gZ2V0X2FuYWx5c3RfcmF0aW5ncyh0aWNrZXIpe1xuICAgICQuYWpheFNldHVwKHtcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgJ1gtQ1NSRi1UT0tFTic6ICQoJ21ldGFbbmFtZT1cIl90b2tlblwiXScpLmF0dHIoJ2NvbnRlbnQnKVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgdG9rZW4gPSAkKCdtZXRhW25hbWU9XCJjc3JmLXRva2VuXCJdJykuYXR0cignY29udGVudCcpO1xuXG4gICAgJC5hamF4KHtcbiAgICAgICAgdXJsOiAnL2NvbXBhbnkvJyt0aWNrZXIrJy9nZXRfYW5hbHlzdF9yYXRpbmdzLycsXG4gICAgICAgIHR5cGU6J0dFVCcsXG4gICAgICAgIGRhdGFUeXBlOidqc29uJyxcbiAgICAgICAgZGF0YTp7XG4gICAgICAgICAgICBfdG9rZW46dG9rZW4sXG4gICAgICAgICAgICB0aWNrZXI6dGlja2VyXG4gICAgICAgIH0sXG4gICAgICAgIHN1Y2Nlc3M6ZnVuY3Rpb24ocmVzcG9uc2Upe1xuICAgICAgICAgICAgYnVpbGRfY2hhcnRzKHJlc3BvbnNlKTsgICAgICAgIFxuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmdldF9hbmFseXN0X3JhdGluZ3ModGlja2VyKTtcblxuLy8gQlVJTEQgQUxMIENIQVJUU1xuZnVuY3Rpb24gYnVpbGRfY2hhcnRzKHJlc3BvbnNlKXtcblxuICAgIC8vIEJVWSBDT05TRU5TVVMgQ0hBUlRcbiAgICB2YXIgY3R4ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJidXlfY29uc2Vuc3VzXCIpO1xuICAgIHZhciBidXlfY29uc2Vuc3VzID0gbmV3IENoYXJ0KGN0eCwge1xuICAgICAgICB0eXBlOiAnZG91Z2hudXQnLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBsYWJlbHM6IFtdLFxuICAgICAgICAgICAgZGF0YXNldHM6IFt7XG4gICAgICAgICAgICAgICAgZGF0YTogW3Jlc3BvbnNlLmJ1eV9jb25zZW5zdXMsIDEwMC1yZXNwb25zZS5idXlfY29uc2Vuc3VzXSxcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFtcbiAgICAgICAgICAgICAgICAgICAgJyM0MkE0NTgnLFxuICAgICAgICAgICAgICAgICAgICAnI2NjYycsXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogW1xuICAgICAgICAgICAgICAgICAgICAnI2NjYycsXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBib3JkZXJXaWR0aDogMVxuICAgICAgICAgICAgfV1cbiAgICAgICAgfSxcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgcm90YXRpb246IDEgKiBNYXRoLlBJLFxuICAgICAgICAgICAgY2lyY3VtZmVyZW5jZTogMSAqIE1hdGguUEksXG4gICAgICAgICAgICByZXNwb25zaXZlOiB0cnVlLFxuICAgICAgICAgICAgbGVnZW5kOiB7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogZmFsc2UsXG4gICAgICAgICAgICAgICAgZm9udENvbG9yOiAnIzAwMCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdG9vbHRpcHM6IHtcbiAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbGVtZW50czoge1xuICAgICAgICAgICAgICAgIGNlbnRlcjoge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0OiByZXNwb25zZS5idXlfY29uc2Vuc3VzKyclJyxcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjMDAwJyxcbiAgICAgICAgICAgICAgICAgICAgZm9udFN0eWxlOiAnQXJpYWwnLFxuICAgICAgICAgICAgICAgICAgICBzaWRlUGFkZGluZzogMTVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBDVVJSRU5UIEFOQUxZU1QgUkFUSU5HU1xuXG4gICAgdmFyIGN1cnJlbnRfYW5hbHlzdF9yYXRpbmdzX2RhdGEgPSB7XG4gICAgICAgIGxhYmVsczogWydTdHJvbmcgQnV5JywgJ0J1eScsICdIb2xkJywgJ1NlbGwnLCAnU3Ryb25nIFNlbGwnXSxcbiAgICAgICAgZGF0YXNldHM6IFt7XG4gICAgICAgICAgICBkYXRhOiByZXNwb25zZS5jdXJyZW50X3JhdGluZ3MsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFsnIzNCOTU0RicsICcjMzhjMTcyJywgJyNhYWEnLCAnI0VCNEI0NicsICcjQzcyRDI5J10sXG5cbiAgICAgICAgfV0sXG4gICAgICAgIGVsZW1lbnRzOiB7XG4gICAgICAgICAgICBjZW50ZXI6IHtcbiAgICAgICAgICAgICAgICBjb2xvcjogJyMyMDMwNDcnLFxuICAgICAgICAgICAgICAgIGZvbnRTdHlsZTogJ1NlZ29ldWknLFxuICAgICAgICAgICAgICAgIHNpZGVQYWRkaW5nOiAxNVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIH07XG5cbiAgICB2YXIgY3VycmVudF9hbmFseXN0X3JhdGluZ3Nfb3B0aW9ucyA9IHtcbiAgICAgICAgc2NhbGVzOiB7XG4gICAgICAgICAgICB4QXhlczogW3tcbiAgICAgICAgICAgICAgICB0aWNrczoge1xuICAgICAgICAgICAgICAgICAgICAvLyBmb250Q29sb3I6IE1hc3Rlci50aWNrX2NvbG9yLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ3JpZExpbmVzOiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbG9yOiBNYXN0ZXIuZ3JpZGxpbmVfY29sb3IsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgeUF4ZXM6IFt7XG4gICAgICAgICAgICAgICAgdGlja3M6IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZm9udENvbG9yOiBNYXN0ZXIudGlja19jb2xvcixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdyaWRMaW5lczoge1xuICAgICAgICAgICAgICAgICAgICAvLyBjb2xvcjogTWFzdGVyLmdyaWRsaW5lX2NvbG9yLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9XSxcbiAgICAgICAgfSxcbiAgICAgICAgcmVzcG9uc2l2ZTogdHJ1ZSxcbiAgICAgICAgbWFpbnRhaW5Bc3BlY3RSYXRpbzogZmFsc2UsXG4gICAgICAgIGxlZ2VuZDoge1xuICAgICAgICAgICAgZGlzcGxheTogZmFsc2VcbiAgICAgICAgfSxcblxuICAgICAgICB0b29sdGlwczoge1xuICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgIG1vZGU6ICdzaW5nbGUnLFxuICAgICAgICAgICAgLy8gY2FsbGJhY2tzOiB7XG4gICAgICAgICAgICAvLyAgICAgbGFiZWw6IGZ1bmN0aW9uICh0b29sdGlwSXRlbSwgZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAvLyByZXR1cm4gTWFzdGVyLmNvbnZlcnRTZWNzVG9IcnNNaW5zU2VjcyhkYXRhWydkYXRhc2V0cyddWzBdWydkYXRhJ11bdG9vbHRpcEl0ZW1bJ2luZGV4J11dKTtcbiAgICAgICAgICAgIC8vICAgICB9XG4gICAgICAgICAgICAvLyB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgY3R4ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2N1cnJlbnRfYW5hbHlzdF9yYXRpbmdzX2NoYXJ0JykuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAvLyBpZiAod2luZG93LmN1cnJlbnRfYW5hbHlzdF9yYXRpbmdzX2NoYXJ0ICE9IHVuZGVmaW5lZCkge1xuICAgIC8vICAgICB3aW5kb3cuY3VycmVudF9hbmFseXN0X3JhdGluZ3NfY2hhcnQuZGVzdHJveSgpO1xuICAgIC8vIH1cbiAgICBjb25zb2xlLmxvZyhyZXNwb25zZS5oaXN0b3JpY19yYXRpbmdzLnN0cm9uZ19idXkpO1xuXG4gICAgd2luZG93LmN1cnJlbnRfYW5hbHlzdF9yYXRpbmdzX2NoYXJ0ID0gbmV3IENoYXJ0KGN0eCwge1xuICAgICAgICB0eXBlOiAnaG9yaXpvbnRhbEJhcicsXG4gICAgICAgIGRhdGE6IGN1cnJlbnRfYW5hbHlzdF9yYXRpbmdzX2RhdGEsXG4gICAgICAgIG9wdGlvbnM6IGN1cnJlbnRfYW5hbHlzdF9yYXRpbmdzX29wdGlvbnNcbiAgICB9KTtcblxuICAgIC8vIEhJU1RPUklDIEFOQUxZU1RTIFJBVElOR1NcbiAgICBsZXQgaGlzdG9yaWNfYW5hbHlzdF9yYXRpbmdzX2RhdGEgPSB7XG4gICAgICAgIGxhYmVsczogcmVzcG9uc2UuaGlzdG9yaWNfZGF0ZXMsXG4gICAgICAgIC8vIC9bJyMzQjk1NEYnLCAnIzM4YzE3MicsICcjYWFhJywgJyNFQjRCNDYnLCAnI0M3MkQyOSddXG4gICAgICAgIGRhdGFzZXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdTdHJvbmcgQnV5JyxcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjM0I5NTRGJyxcbiAgICAgICAgICAgICAgICBkYXRhOnJlc3BvbnNlLmhpc3RvcmljX3JhdGluZ3Muc3Ryb25nX2J1eVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0J1eScsXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnIzM4YzE3MicsXG4gICAgICAgICAgICAgICAgZGF0YTpyZXNwb25zZS5oaXN0b3JpY19yYXRpbmdzLmJ1eVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0hvbGQnLFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJyNhYWEnLFxuICAgICAgICAgICAgICAgIGRhdGE6cmVzcG9uc2UuaGlzdG9yaWNfcmF0aW5ncy5ob2xkXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnU2VsbCcsXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnI0VCNEI0NicsXG4gICAgICAgICAgICAgICAgZGF0YTpyZXNwb25zZS5oaXN0b3JpY19yYXRpbmdzLnNlbGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdTdHJvbmcgU2VsbCcsXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnI0M3MkQyOScsXG4gICAgICAgICAgICAgICAgZGF0YTpyZXNwb25zZS5oaXN0b3JpY19yYXRpbmdzLnN0cm9uZ19zZWxsXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9O1xuXG4gICAgbGV0IGhpc3RvcmljX2FuYWx5c3RfcmF0aW5nc19vcHRpb25zID0ge1xuICAgICAgICByZXNwb25zaXZlOiB0cnVlLFxuICAgICAgICBtYWludGFpbkFzcGVjdFJhdGlvOiBmYWxzZSxcbiAgICAgICAgbGVnZW5kOiB7XG4gICAgICAgICAgICAvLyBkaXNwbGF5OmZhbHNlLFxuICAgICAgICAgICAgcG9zaXRpb246ICdib3R0b20nLFxuICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgYm94V2lkdGg6IDEyLFxuICAgICAgICAgICAgICAgIC8vIGZvbnRDb2xvcjogTWFzdGVyLnRpY2tfY29sb3IsXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHNjYWxlczoge1xuICAgICAgICAgICAgeEF4ZXM6IFt7XG4gICAgICAgICAgICAgICAgc3RhY2tlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB0aWNrczoge1xuICAgICAgICAgICAgICAgICAgICAvLyBmb250Q29sb3I6IE1hc3Rlci50aWNrX2NvbG9yLFxuICAgICAgICAgICAgICAgICAgICBiZWdpbkF0WmVybzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgLy8gdXNlckNhbGxiYWNrOiBmdW5jdGlvbiAobGFiZWwsIGluZGV4LCBsYWJlbHMpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIGlmIChNYXRoLmZsb29yKGxhYmVsKSA9PT0gbGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICByZXR1cm4gbGFiZWw7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIHNjYWxlTGFiZWw6IHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgbGFiZWxTdHJpbmc6ICdSYXRpbmdzIGJ5IERhdGUnLFxuICAgICAgICAgICAgICAgICAgICAvLyBmb250Q29sb3I6IE1hc3Rlci50aWNrX2NvbG9yXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBncmlkTGluZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gY29sb3I6IE1hc3Rlci5ncmlkbGluZV9jb2xvcixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICB5QXhlczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdGlja3M6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZvbnRDb2xvcjogTWFzdGVyLnRpY2tfY29sb3IsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGdyaWRMaW5lczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29sb3I6IE1hc3Rlci5ncmlkbGluZV9jb2xvcixcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgc3RhY2tlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICdsZWZ0JyxcbiAgICAgICAgICAgICAgICAgICAgc2NhbGVQb3NpdGlvbkxlZnQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHNjYWxlTGFiZWw6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbFN0cmluZzogJyMgb2YgUmF0aW5ncycsXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBmb250Q29sb3I6IE1hc3Rlci50aWNrX2NvbG9yXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIHRvb2x0aXBzOiB7XG4gICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICAgICAgbW9kZTogJ2xhYmVsJyxcbiAgICAgICAgICAgIC8vIGZpbHRlcjogZnVuY3Rpb24gKHRvb2x0aXBJdGVtLCBkYXRhKSB7XG4gICAgICAgICAgICAvLyAgICAgdmFyIGRhdGFwb2ludFZhbHVlID0gZGF0YS5kYXRhc2V0c1t0b29sdGlwSXRlbS5kYXRhc2V0SW5kZXhdLmRhdGFbdG9vbHRpcEl0ZW0uaW5kZXhdO1xuXG4gICAgICAgICAgICAvLyAgICAgaWYgKGRhdGFwb2ludFZhbHVlKSB7XG4gICAgICAgICAgICAvLyAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgLy8gICAgIH1cbiAgICAgICAgICAgIC8vIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmICh3aW5kb3cuaGlzdG9yaWNfYW5hbHlzdF9yYXRpbmdzX2NoYXJ0ICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyB3aW5kb3cuaGlzdG9yaWNfYW5hbHlzdF9yYXRpbmdzX2NoYXJ0LmRlc3Ryb3koKTtcbiAgICB9XG5cbiAgICB2YXIgY3R4ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2hpc3RvcmljX2FuYWx5c3RfcmF0aW5nc19jaGFydCcpLmdldENvbnRleHQoJzJkJyk7XG5cbiAgICB3aW5kb3cuaGlzdG9yaWNfYW5hbHlzdF9yYXRpbmdzX2NoYXJ0ID0gbmV3IENoYXJ0KGN0eCwge1xuICAgICAgICB0eXBlOiAnYmFyJyxcbiAgICAgICAgZGF0YTogaGlzdG9yaWNfYW5hbHlzdF9yYXRpbmdzX2RhdGEsXG4gICAgICAgIG9wdGlvbnM6IGhpc3RvcmljX2FuYWx5c3RfcmF0aW5nc19vcHRpb25zXG4gICAgfSk7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/js/analystratings.js\n");

/***/ }),

/***/ 1:
/*!**********************************************!*\
  !*** multi ./resources/js/analystratings.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /Users/thomasgrauer/Sites/market_watch/resources/js/analystratings.js */"./resources/js/analystratings.js");


/***/ })

/******/ });